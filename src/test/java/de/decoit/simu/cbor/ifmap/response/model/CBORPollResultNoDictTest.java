/* 
 * Copyright 2015 DECOIT GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.decoit.simu.cbor.ifmap.response.model;

import co.nstant.in.cbor.CborBuilder;
import co.nstant.in.cbor.CborEncoder;
import co.nstant.in.cbor.builder.ArrayBuilder;
import de.decoit.simu.cbor.ifmap.enums.IfMapErrorCode;
import de.decoit.simu.cbor.ifmap.enums.IfMapIdentityType;
import de.decoit.simu.cbor.ifmap.identifier.AbstractIdentifier;
import de.decoit.simu.cbor.ifmap.identifier.CBORDevice;
import de.decoit.simu.cbor.ifmap.identifier.CBORIdentity;
import de.decoit.simu.cbor.ifmap.metadata.AbstractMetadata;
import de.decoit.simu.cbor.ifmap.metadata.multivalue.CBORCapability;
import de.decoit.simu.cbor.ifmap.metadata.multivalue.CBORDeviceAttribute;
import de.decoit.simu.cbor.ifmap.response.model.search.DeletePollSearchResult;
import de.decoit.simu.cbor.ifmap.response.model.search.NotifyPollSearchResult;
import de.decoit.simu.cbor.ifmap.response.model.search.SearchPollSearchResult;
import de.decoit.simu.cbor.ifmap.response.model.search.SearchResultItem;
import de.decoit.simu.cbor.ifmap.response.model.search.UpdatePollSearchResult;
import de.decoit.simu.cbor.ifmap.util.IfMapNamespaces;
import de.decoit.simu.cbor.xml.dictionary.DictionaryProvider;
import de.decoit.simu.cbor.xml.dictionary.DictionarySimpleElement;
import java.io.ByteArrayOutputStream;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import javax.xml.bind.DatatypeConverter;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import static org.junit.Assert.*;


/**
 *
 * @author Thomas Rix (rix@decoit.de)
 */
@Slf4j
public class CBORPollResultNoDictTest {
	private final AbstractIdentifier indentifierA = new CBORIdentity("my-dns-name", IfMapIdentityType.DNS_NAME);
	private final AbstractIdentifier indentifierB = new CBORDevice("device-01", false);
	private final String publisherId = "my-publisher-id";
	private final ZonedDateTime ifMapTimestamp = ZonedDateTime.parse("2011-12-03T10:15:30.123456+01:00", DateTimeFormatter.ISO_OFFSET_DATE_TIME);
	private final String capabilityName1 = "cap-01";
	private final String capabilityName2 = "cap-02";
	private final String devAttrName = "my-attribute";
	private final String name = "sr-name";
	private final CBORErrorResult errorResult = new CBORErrorResult(IfMapErrorCode.FAILURE);
	private final DeletePollSearchResult deleteResult = new DeletePollSearchResult();
	private final NotifyPollSearchResult notifyResult = new NotifyPollSearchResult();
	private final SearchPollSearchResult searchResult = new SearchPollSearchResult();
	private final UpdatePollSearchResult updateResult = new UpdatePollSearchResult();
	private final String errorString = "custom-error";


	public CBORPollResultNoDictTest() {
		AbstractMetadata m1 = new CBORCapability(this.publisherId, this.ifMapTimestamp, this.capabilityName1);
		AbstractMetadata m2 = new CBORCapability(this.publisherId, this.ifMapTimestamp, this.capabilityName2);
		AbstractMetadata m3 = new CBORDeviceAttribute(this.publisherId, this.ifMapTimestamp, this.devAttrName);

		SearchResultItem sri1 = new SearchResultItem(this.indentifierA);
		sri1.addMetadata(m3);

		SearchResultItem sri2 = new SearchResultItem(this.indentifierB);
		sri2.setIdentifierB(this.indentifierA);
		sri2.addMetadata(m1);
		sri2.addMetadata(m2);

		this.deleteResult.addSearchResultItem(sri1);
		this.deleteResult.addSearchResultItem(sri2);

		this.notifyResult.addSearchResultItem(sri1);
		this.notifyResult.addSearchResultItem(sri2);

		this.searchResult.addSearchResultItem(sri1);
		this.searchResult.addSearchResultItem(sri2);

		this.updateResult.addSearchResultItem(sri1);
		this.updateResult.addSearchResultItem(sri2);

		this.errorResult.setErrorString(this.errorString);
		this.errorResult.setName("sub-01");
	}


	@Test
	public void testCborSerialize() throws Exception {
		DictionarySimpleElement parentElementEntry = DictionaryProvider.getInstance().findElementByPath("<" + IfMapNamespaces.IFMAP + ">response");

		CBORPollResult instance = new CBORPollResult();
		instance.addPollResult(this.errorResult);
		instance.addPollResult(this.deleteResult);
		instance.addPollResult(this.notifyResult);
		instance.addPollResult(this.searchResult);
		instance.addPollResult(this.updateResult);

		CborBuilder cb = new CborBuilder();
		ArrayBuilder ab = cb.addArray();

		instance.cborSerialize(ab, parentElementEntry);

		ab.end();

		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		CborEncoder ce = new CborEncoder(bos);
		ce.encode(cb.build());

		log.info("CBOR serialize:");
		log.info(DatatypeConverter.printHexBinary(bos.toByteArray()));

		byte[] expResult = DatatypeConverter.parseHexBinary("84F66A706F6C6C526573756C748094F66B6572726F72526573756C7484"
				+ "696572726F72436F6465674661696C757265646E616D65667375622D303184F66B6572726F72537472696E67806C63757374"
				+ "6F6D2D6572726F72F66C64656C657465526573756C748088F66A726573756C744974656D80887831687474703A2F2F777777"
				+ "2E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41502F32686964656E746974798464"
				+ "6E616D656B6D792D646E732D6E616D65647479706568646E732D6E616D6580F6686D6574616461746180847839687474703A"
				+ "2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41504D45544144415441"
				+ "2F32706465766963652D617474726962757465887269666D61702D7075626C69736865722D69646F6D792D7075626C697368"
				+ "65722D69646F69666D61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374"
				+ "696F6EC482281A075BCA007169666D61702D63617264696E616C6974796A6D756C746956616C756584F6646E616D65806C6D"
				+ "792D617474726962757465F66A726573756C744974656D808C7831687474703A2F2F7777772E74727573746564636F6D7075"
				+ "74696E6767726F75702E6F72672F323031302F49464D41502F32666465766963658084F6646E616D6580696465766963652D"
				+ "30317831687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41"
				+ "502F32686964656E7469747984646E616D656B6D792D646E732D6E616D65647479706568646E732D6E616D6580F6686D6574"
				+ "616461746180887839687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F32303130"
				+ "2F49464D41504D455441444154412F326A6361706162696C697479887269666D61702D7075626C69736865722D69646F6D79"
				+ "2D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74696D65737461"
				+ "6D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E616C6974796A6D756C746956616C756584F6"
				+ "646E616D6580666361702D30317839687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72"
				+ "672F323031302F49464D41504D455441444154412F326A6361706162696C697479887269666D61702D7075626C6973686572"
				+ "2D69646F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74"
				+ "696D657374616D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E616C6974796A6D756C746956"
				+ "616C756584F6646E616D6580666361702D3032F66C6E6F74696679526573756C748088F66A726573756C744974656D808878"
				+ "31687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41502F32"
				+ "686964656E7469747984646E616D656B6D792D646E732D6E616D65647479706568646E732D6E616D6580F6686D6574616461"
				+ "746180847839687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F4946"
				+ "4D41504D455441444154412F32706465766963652D617474726962757465887269666D61702D7075626C69736865722D6964"
				+ "6F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74696D65"
				+ "7374616D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E616C6974796A6D756C746956616C75"
				+ "6584F6646E616D65806C6D792D617474726962757465F66A726573756C744974656D808C7831687474703A2F2F7777772E74"
				+ "727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41502F32666465766963658084F6646E61"
				+ "6D6580696465766963652D30317831687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72"
				+ "672F323031302F49464D41502F32686964656E7469747984646E616D656B6D792D646E732D6E616D65647479706568646E73"
				+ "2D6E616D6580F6686D6574616461746180887839687474703A2F2F7777772E74727573746564636F6D707574696E6767726F"
				+ "75702E6F72672F323031302F49464D41504D455441444154412F326A6361706162696C697479887269666D61702D7075626C"
				+ "69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9E8B278186966"
				+ "6D61702D74696D657374616D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E616C6974796A6D"
				+ "756C746956616C756584F6646E616D6580666361702D30317839687474703A2F2F7777772E74727573746564636F6D707574"
				+ "696E6767726F75702E6F72672F323031302F49464D41504D455441444154412F326A6361706162696C697479887269666D61"
				+ "702D7075626C69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9"
				+ "E8B2781869666D61702D74696D657374616D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E61"
				+ "6C6974796A6D756C746956616C756584F6646E616D6580666361702D3032F66C736561726368526573756C748088F66A7265"
				+ "73756C744974656D80887831687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F32"
				+ "3031302F49464D41502F32686964656E7469747984646E616D656B6D792D646E732D6E616D65647479706568646E732D6E61"
				+ "6D6580F6686D6574616461746180847839687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E"
				+ "6F72672F323031302F49464D41504D455441444154412F32706465766963652D617474726962757465887269666D61702D70"
				+ "75626C69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D70C11A4ED9E8B278"
				+ "1869666D61702D74696D657374616D702D6672616374696F6EC482281A075BCA007169666D61702D63617264696E616C6974"
				+ "796A6D756C746956616C756584F6646E616D65806C6D792D617474726962757465F66A726573756C744974656D808C783168"
				+ "7474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41502F326664"
				+ "65766963658084F6646E616D6580696465766963652D30317831687474703A2F2F7777772E74727573746564636F6D707574"
				+ "696E6767726F75702E6F72672F323031302F49464D41502F32686964656E7469747984646E616D656B6D792D646E732D6E61"
				+ "6D65647479706568646E732D6E616D6580F6686D6574616461746180887839687474703A2F2F7777772E7472757374656463"
				+ "6F6D707574696E6767726F75702E6F72672F323031302F49464D41504D455441444154412F326A6361706162696C69747988"
				+ "7269666D61702D7075626C69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D74696D657374616D"
				+ "70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374696F6EC482281A075BCA007169666D61702D6361"
				+ "7264696E616C6974796A6D756C746956616C756584F6646E616D6580666361702D30317839687474703A2F2F7777772E7472"
				+ "7573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41504D455441444154412F326A6361706162"
				+ "696C697479887269666D61702D7075626C69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D7469"
				+ "6D657374616D70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374696F6EC482281A075BCA00716966"
				+ "6D61702D63617264696E616C6974796A6D756C746956616C756584F6646E616D6580666361702D3032F66C75706461746552"
				+ "6573756C748088F66A726573756C744974656D80887831687474703A2F2F7777772E74727573746564636F6D707574696E67"
				+ "67726F75702E6F72672F323031302F49464D41502F32686964656E7469747984646E616D656B6D792D646E732D6E616D6564"
				+ "7479706568646E732D6E616D6580F6686D6574616461746180847839687474703A2F2F7777772E74727573746564636F6D70"
				+ "7574696E6767726F75702E6F72672F323031302F49464D41504D455441444154412F32706465766963652D61747472696275"
				+ "7465887269666D61702D7075626C69736865722D69646F6D792D7075626C69736865722D69646F69666D61702D74696D6573"
				+ "74616D70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374696F6EC482281A075BCA007169666D6170"
				+ "2D63617264696E616C6974796A6D756C746956616C756584F6646E616D65806C6D792D617474726962757465F66A72657375"
				+ "6C744974656D808C7831687474703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031"
				+ "302F49464D41502F32666465766963658084F6646E616D6580696465766963652D30317831687474703A2F2F7777772E7472"
				+ "7573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41502F32686964656E7469747984646E616D"
				+ "656B6D792D646E732D6E616D65647479706568646E732D6E616D6580F6686D6574616461746180887839687474703A2F2F77"
				+ "77772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41504D455441444154412F326A"
				+ "6361706162696C697479887269666D61702D7075626C69736865722D69646F6D792D7075626C69736865722D69646F69666D"
				+ "61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374696F6EC482281A075B"
				+ "CA007169666D61702D63617264696E616C6974796A6D756C746956616C756584F6646E616D6580666361702D303178396874"
				+ "74703A2F2F7777772E74727573746564636F6D707574696E6767726F75702E6F72672F323031302F49464D41504D45544144"
				+ "4154412F326A6361706162696C697479887269666D61702D7075626C69736865722D69646F6D792D7075626C69736865722D"
				+ "69646F69666D61702D74696D657374616D70C11A4ED9E8B2781869666D61702D74696D657374616D702D6672616374696F6E"
				+ "C482281A075BCA007169666D61702D63617264696E616C6974796A6D756C746956616C756584F6646E616D6580666361702D"
				+ "3032");

		assertTrue("Byte array mismatch", Arrays.equals(expResult, bos.toByteArray()));
	}
}
